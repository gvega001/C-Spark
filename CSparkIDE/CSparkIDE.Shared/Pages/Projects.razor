@page "/projects"
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime

<PageTitle>Projects</PageTitle>

<style>
    /* Layout Container */
    .projects-container {
        max-width: 900px;
        margin: auto;
        padding: 20px;
        font-family: Arial, sans-serif;
    }

    /* Banner */
    .projects-banner {
        background: linear-gradient(to right, #007acc, #61dafb);
        color: white;
        padding: 30px;
        border-radius: 10px;
        text-align: center;
    }

    /* Card-Based Layout */
    .projects-card {
        background: #ffffff;
        border: 1px solid #ddd;
        border-radius: 10px;
        padding: 20px;
        margin-top: 20px;
        box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);
    }

    /* Buttons */
    .btn {
        padding: 10px 15px;
        border: none;
        cursor: pointer;
        border-radius: 5px;
        font-weight: bold;
        text-align: center;
    }

    .btn-primary {
        background: #007acc;
        color: white;
    }

    .btn-secondary {
        background: #3c3c3c;
        color: white;
    }

    /* Project List */
    .project-list {
        list-style-type: none;
        padding: 0;
    }

    .project-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 10px;
        border-bottom: 1px solid #eee;
    }

        .project-item a {
            text-decoration: none;
            color: #007acc;
            font-weight: bold;
        }

            .project-item a:hover {
                text-decoration: underline;
            }

    /* Project Actions */
    .project-actions button {
        margin-left: 5px;
        padding: 5px 8px;
        font-size: 0.9rem;
    }

    /* New Project Input */
    .new-project-input {
        display: flex;
        margin-top: 10px;
    }

        .new-project-input input {
            flex: 1;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 5px;
            margin-right: 10px;
        }
</style>

<div class="projects-container">
    <!-- Header -->
    <div class="projects-banner">
        <h1>Projects</h1>
        <p>Manage your C-Spark projects here.</p>
    </div>

    <!-- Create New Project -->
    <div class="projects-card">
        <h2>Create a New Project</h2>
        <div class="new-project-input">
            <input type="text" placeholder="Enter project name..." @bind="newProjectName" />
            <button class="btn btn-primary" @onclick="CreateNewProject">Create</button>
        </div>
    </div>

    <!-- Existing Projects -->
    <div class="projects-card">
        <h2>Your Projects</h2>
        @if (projects.Any())
        {
            <ul class="project-list">
                @foreach (var project in projects)
                {
                    <li class="project-item">
                        <a href="@($"editor?project={project.Id}")">@project.Name</a>
                        <div class="project-actions">
                            <button class="btn-secondary" @onclick="() => RenameProject(project.Id)">Rename</button>
                            <button class="btn btn-danger" @onclick="() => DeleteProject(project.Id)">Delete</button>
                        </div>
                    </li>
                }
            </ul>
        }
        else
        {
            <p>No projects found. Start a new project above!</p>
        }
    </div>
</div>

@code {
    private string newProjectName = "";
    private List<ProjectModel> projects= new List<ProjectModel>
    {
        new ProjectModel { Id = 1, Name = "Hello World", LastModified = DateTime.Now.AddDays(-2) },
        new ProjectModel { Id = 2, Name = "Game Logic", LastModified = DateTime.Now.AddDays(-5) }
    };

    private void CreateNewProject()
    {
        if (!string.IsNullOrWhiteSpace(newProjectName))
        {
            projects.Add(new ProjectModel { Id = projects.Count + 1, Name = newProjectName, LastModified = DateTime.Now });
            newProjectName = "";
        }
    }

    private void RenameProject(int id)
    {
        var project = projects.FirstOrDefault(p => p.Id == id);
        if (project != null)
        {
            project.Name = "Renamed Project";
        }
    }

    private void DeleteProject(int id)
    {
        projects.RemoveAll(p => p.Id == id);
    }

    private class ProjectModel
    {
        public int Id { get; set; }
        public string? Name { get; set; }
        public DateTime LastModified { get; set; }
    }
}
