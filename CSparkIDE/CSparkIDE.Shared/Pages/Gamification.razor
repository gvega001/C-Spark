@page "/gamification"

<PageTitle>Gamification & Achievements</PageTitle>

<!-- FontAwesome Icons -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" />

<style>
    /* Global Styles */
    body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        background: #f0f2f5;
        color: #333;
        margin: 0;
        padding: 0;
    }

    /* Container */
    .gamification-container {
        max-width: 1100px;
        margin: 0 auto;
        padding: 20px;
    }

    /* Banner */
    .gamification-banner {
        background: linear-gradient(to right, #007acc, #61dafb);
        color: #fff;
        padding: 30px;
        border-radius: 10px;
        text-align: center;
        margin-bottom: 20px;
    }

        .gamification-banner h1 {
            margin: 0;
            font-size: 2.2rem;
        }

        .gamification-banner p {
            margin: 5px 0 0;
            font-size: 1.2rem;
        }

    /* Cards */
    .gamification-card {
        background: #fff;
        border: 1px solid #ddd;
        border-radius: 10px;
        padding: 20px;
        margin-bottom: 20px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        transition: transform 0.2s ease-in-out, box-shadow 0.2s ease;
    }

        .gamification-card:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
        }

    /* Progress Bar */
    .progress-bar {
        width: 100%;
        height: 10px;
        border-radius: 5px;
        background: #eee;
        margin-top: 10px;
        overflow: hidden;
    }

    .progress-bar-inner {
        height: 100%;
        background: #007acc;
        transition: width 0.5s ease-in-out;
    }

    /* Achievements List */
    .achievements-list {
        list-style: none;
        padding: 0;
        margin: 0;
    }

        .achievements-list li {
            display: flex;
            align-items: center;
            padding: 12px;
            border-bottom: 1px solid #eee;
            transition: background 0.2s ease;
        }

            .achievements-list li:hover,
            .achievements-list li:focus {
                background: #f5f5f5;
            }

    /* FontAwesome Icons */
    .achievements-icon {
        font-size: 24px;
        margin-right: 12px;
        color: #007acc; /* Default color */
    }

    /* Analytics Grid */
    .analytics-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
        gap: 20px;
        margin-top: 10px;
    }

    .stat-box {
        background: #f9f9f9;
        padding: 15px;
        border-radius: 8px;
        text-align: center;
    }

    .stat-number {
        font-size: 1.8rem;
        font-weight: bold;
        color: #007acc;
        margin: 5px 0 0;
    }
</style>

<div class="gamification-container">
    <!-- Banner Section -->
    <header class="gamification-banner" role="banner">
        <h1>Gamification & Achievements</h1>
        <p>Track your progress and unlock new achievements as you code!</p>
    </header>

    <!-- Progress Overview Card -->
    <article class="gamification-card" aria-labelledby="progress-overview-heading">
        <h2 id="progress-overview-heading">Progress Overview</h2>
        <p>Current Streak: <strong>@currentStreak</strong> days</p>
        <p>Programs Run: <strong>@programRuns</strong></p>
        <p>Completed Challenges: <strong>@completedChallenges</strong></p>
        <div class="progress-bar" role="progressbar" aria-valuenow="@programRuns" aria-valuemin="0" aria-valuemax="100">
            <div class="progress-bar-inner" style="width:@(programRuns)%"></div>
        </div>
    </article>

    <!-- Unlocked Achievements Card -->
    <article class="gamification-card" aria-labelledby="unlocked-achievements-heading">
        <h2 id="unlocked-achievements-heading">Unlocked Achievements</h2>
        @if (unlockedAchievements.Any())
        {
            <ul class="achievements-list">
                @foreach (var achievement in unlockedAchievements)
                {
                    <li tabindex="0">
                        <i class="@achievement.IconClass achievements-icon"></i>
                        <strong>@achievement.Title</strong> - @achievement.DateUnlocked.ToShortDateString()
                    </li>
                }
            </ul>
        }
        else
        {
            <p>No achievements unlocked yet. Keep coding!</p>
        }
    </article>

    <!-- Performance Analytics Card -->
    <article class="gamification-card" aria-labelledby="performance-analytics-heading">
        <h2 id="performance-analytics-heading">Performance Analytics</h2>
        <div class="analytics-grid">
            <div class="stat-box">
                <p>Lines of Code Written</p>
                <p class="stat-number">@linesOfCode</p>
            </div>
            <div class="stat-box">
                <p>Debugging Success Rate</p>
                <p class="stat-number">@debugSuccessRate%</p>
            </div>
        </div>
    </article>
</div>

@code {
    private int currentStreak = 5;
    private int programRuns = 27;
    private int completedChallenges = 8;
    private int linesOfCode = 1500;
    private double debugSuccessRate = 85.4;

    private List<Achievement> unlockedAchievements = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadGamificationData();
    }

    private async Task LoadGamificationData()
    {
        await Task.Delay(500); // Simulate a backend API call delay

        unlockedAchievements = new List<Achievement>
        {
            new Achievement { Title = "First Program", DateUnlocked = DateTime.Now.AddDays(-10), IconClass = "fa-solid fa-laptop-code" },
            new Achievement { Title = "Debugger Master", DateUnlocked = DateTime.Now.AddDays(-5), IconClass = "fa-solid fa-bug" },
            new Achievement { Title = "100 Lines of Code", DateUnlocked = DateTime.Now.AddDays(-2), IconClass = "fa-solid fa-keyboard" }
        };

        StateHasChanged(); // Refresh UI after loading data
    }

    private class Achievement
    {
        public string Title { get; set; } = "";
        public DateTime DateUnlocked { get; set; }
        public string IconClass { get; set; } = "";
    }
}
