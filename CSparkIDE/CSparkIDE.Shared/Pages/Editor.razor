@page "/editor"
@using CSparkIDE.Shared.Services
@using BlazorMonaco
@inject IFormFactor FormFactor
@inject NavigationManager Navigation

<PageTitle>Editor</PageTitle>

<style>
    /* Global Styles */
    body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        background: #f0f2f5;
        color: #333;
    }

    /* Editor Container */
    .editor-container {
        max-width: 100%;
        margin: 0 auto;
        padding: 20px;
        display: grid;
        grid-template-columns: 3fr 1fr;
        grid-template-rows: auto auto;
        gap: 15px;
    }


    /* Editor Banner */
    .editor-banner {
        background: linear-gradient(to right, #007acc, #61dafb);
        color: #fff;
        padding: 20px;
        border-radius: 10px;
        text-align: center;
        grid-column: 1 / -1;
    }

        .editor-banner h1 {
            font-size: 2rem;
            margin: 0;
        }

    /* Card Styling */
    .card {
        background: #fff;
        border: 1px solid #ddd;
        border-radius: 10px;
        padding: 20px;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        transition: transform 0.2s ease-in-out, box-shadow 0.2s ease;
    }

        .card:hover {
            transform: scale(1.02);
            box-shadow: 0 6px 12px rgba(0,0,0,0.15);
        }

    /* Code Editor Panel */
    .editor-panel h3 {
        margin-top: 0;
    }

    .code-editor {
        height: 100%;
        display: flex;
        flex-direction: column;
    }

    /* Sidebar Styling */
    .sidebar {
        display: flex;
        flex-direction: column;
    }

        .sidebar button {
            margin-bottom: 10px;
        }

        .sidebar ul {
            list-style: none;
            padding: 0;
            margin: 0;
        }

        .sidebar li {
            padding: 10px;
            cursor: pointer;
            border-bottom: 1px solid #eee;
            transition: background 0.2s ease;
        }

            .sidebar li:hover,
            .sidebar li:focus {
                background: #f5f5f5;
            }

    /* Console Panel Styling */
    .console-panel pre {
        background: #f5f5f5;
        padding: 10px;
        border-radius: 5px;
        font-size: 1rem;
        height: 150px;
        overflow-y: auto;
    }

    /* Button Group */
    .btn-group {
        display: flex;
        gap: 10px;
        margin-top: 10px;
    }

    .btn {
        flex: 1;
        padding: 10px;
        border: none;
        cursor: pointer;
        border-radius: 5px;
        font-weight: bold;
        text-align: center;
        transition: background 0.2s ease, color 0.2s ease;
    }

    .btn-primary {
        background: #007acc;
        color: #fff;
    }

    .btn-secondary {
        background: #3c3c3c;
        color: #fff;
    }

    .btn-danger {
        background: #d9534f;
        color: #fff;
    }

    .btn:hover,
    .btn:focus {
        opacity: 0.9;
    }
</style>

<div class="editor-container">
    <!-- Editor Banner -->
    <header class="editor-banner" role="banner">
        <h1>C-Spark Code Editor</h1>
    </header>

    <!-- Main Code Editor Panel -->
    <main class="card editor-panel" aria-labelledby="editor-heading">
        <h3 id="editor-heading">Code Editor - C-Spark</h3>
        <div class="code-editor">
            <MonacoEditor />
        </div>
    </main>

    <!-- Sidebar: Project Explorer -->
    <aside class="card sidebar" aria-labelledby="project-explorer-heading">
        <h3 id="project-explorer-heading">Project Explorer</h3>
        <button type="button" class="btn btn-primary" @onclick="CreateNewFile"
                title="Create a new C-Spark file" aria-label="Create a new C-Spark file">
            + New C-Spark File
        </button>
        <ul>
            @foreach (var file in files)
            {
                <li tabindex="0" @onclick="() => OpenFile(file)"
                    title="@($"Open {file}")" aria-label="@($"Open {file}")">
                    @file
                </li>
            }
        </ul>
    </aside>

    <!-- Console & Debugging Panel -->
    <section class="card console-panel" aria-labelledby="console-heading">
        <h3 id="console-heading">Console Output</h3>
        <pre>@consoleOutput</pre>
        <div class="btn-group">
            <button type="button" class="btn btn-secondary" @onclick="RunCode"
                    title="Run code" aria-label="Run code">
                Run Code
            </button>
            <button type="button" class="btn btn-primary" @onclick="TranspileCode"
                    title="Transpile C-Spark to C" aria-label="Transpile C-Spark to C">
                Transpile to C
            </button>
            <button type="button" class="btn btn-danger" @onclick="SendToDebugger"
                    title="Debug code" aria-label="Debug code">
                Debug Code
            </button>
        </div>
    </section>
</div>

@code {
    private string factor => FormFactor.GetFormFactor();
    private string platform => FormFactor.GetPlatform();
    private List<string> files = new() { "main.cspark", "utils.cspark", "game.cspark" };
    private string consoleOutput = "Waiting for execution...";
    private string code = "// Write your C-Spark code here...";

    private void CreateNewFile()
    {
        string newFileName = $"newfile{files.Count + 1}.cspark";
        files.Add(newFileName);
        consoleOutput = $"Created {newFileName}";
    }

    private void OpenFile(string fileName)
    {
        consoleOutput = $"Opened {fileName}";
        // Optionally, load the file content into the editor here.
    }

    private void RunCode()
    {
        consoleOutput = "Executing... (Future integration with transpiler here)";
        // TODO: Implement code execution logic.
    }

    private void TranspileCode()
    {
        consoleOutput = "Transpiling C-Spark to C...";
        string transpiledCode = TranspileToC(code);
        consoleOutput = $"Transpiled Code:\n{transpiledCode}";
    }

    private string TranspileToC(string cSparkCode)
    {
        // This is a placeholder. Replace with actual transpilation logic when ready.
        return @"
#include <stdio.h>

int main() {
    printf(""Hello, World!\n"");
    return 0;
}";
    }

    private void SendToDebugger()
    {
        string debugData = $"Debugging File: {files.FirstOrDefault() ?? "unknown"}"; // Placeholder
        Navigation.NavigateTo($"/debugger?debugData={Uri.EscapeDataString(debugData)}");
    }
}
