@page "/editor"
@using CSparkIDE.Shared.Services
@using BlazorMonaco
@inject IFormFactor FormFactor
@inject NavigationManager Navigation

<PageTitle>Editor</PageTitle>

<style>
    /* Layout Container */
    .editor-container {
        max-width: 1200px;
        margin: auto;
        display: grid;
        grid-template-columns: 3fr 1fr;
        grid-template-rows: auto 300px;
        gap: 15px;
        padding: 20px;
        font-family: Arial, sans-serif;
    }

    /* Compact Banner */
    .editor-banner {
        background: linear-gradient(to right, #007acc, #61dafb);
        color: white;
        padding: 15px;
        border-radius: 10px;
        text-align: center;
        font-size: 1.2rem;
        grid-column: span 2;
    }

    /* Card-based Design */
    .card {
        background: #ffffff;
        border: 1px solid #ddd;
        border-radius: 10px;
        padding: 20px;
        box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);
    }

    /* Sidebar Styling */
    .sidebar {
        display: flex;
        flex-direction: column;
    }

    ul {
        list-style-type: none;
        padding: 0;
    }

        ul li {
            padding: 8px;
            cursor: pointer;
            border-bottom: 1px solid #eee;
        }

            ul li:hover {
                background: #f5f5f5;
            }

    /* Console Output */
    .console-panel pre {
        background: #f5f5f5;
        padding: 10px;
        border-radius: 5px;
        font-size: 1rem;
        height: 150px;
        overflow-y: auto;
    }

    /* Buttons */
    .btn-group {
        display: flex;
        gap: 10px;
        margin-top: 10px;
    }

    .btn {
        flex: 1;
        padding: 10px;
        border: none;
        cursor: pointer;
        border-radius: 5px;
        font-weight: bold;
        text-align: center;
    }

    .btn-primary {
        background: #007acc;
        color: white;
    }

    .btn-secondary {
        background: #3c3c3c;
        color: white;
    }

    .btn-danger {
        background: #d9534f;
        color: white;
    }

    /* Code Editor Styling */
    .code-editor {
        height: 100%;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
    }
</style>

<div class="editor-container">
    <!-- Compact Banner -->
    <div class="editor-banner">
        <h1>C-Spark Code Editor</h1>
    </div>

    <!-- Main Code Editor Panel (Wider) -->
    <div class="card editor-panel">
        <h3>Code Editor - C-Spark</h3>
        <div class="code-editor">
            <MonacoEditor />
        </div>
    </div>

    <!-- Sidebar: Project Explorer (Smaller) -->
    <div class="card sidebar">
        <h3>Project Explorer</h3>
        <button class="btn btn-primary" @onclick="CreateNewFile">+ New C-Spark File</button>
        <ul>
            @foreach (var file in files)
            {
                <li @onclick="() => OpenFile(file)">@file</li>
            }
        </ul>
    </div>

    <!-- Console & Debugging Panel (Wider) -->
    <div class="card console-panel">
        <h3>Console Output</h3>
        <pre>@consoleOutput</pre>
        <div class="btn-group">
            <button class="btn btn-secondary" @onclick="RunCode">Run Code</button>
            <button class="btn btn-primary" @onclick="TranspileCode">Transpile to C</button>
            <button class="btn btn-danger" @onclick="SendToDebugger">Debug Code</button>
        </div>
    </div>
</div>

@code {
    private string factor => FormFactor.GetFormFactor();
    private string platform => FormFactor.GetPlatform();
    private List<string> files = new() { "main.cspark", "utils.cspark", "game.cspark" };
    private string consoleOutput = "Waiting for execution...";
    private string code = "// Write your C-Spark code here...";

    private void CreateNewFile()
    {
        string newFileName = $"newfile{files.Count + 1}.cspark";
        files.Add(newFileName);
    }

    private void OpenFile(string fileName)
    {
        consoleOutput = $"Opened {fileName}";
    }

    private void RunCode()
    {
        consoleOutput = "Executing... (Future integration with transpiler here)";
    }

    private void TranspileCode()
    {
        consoleOutput = "Transpiling C-Spark to C...";
        string transpiledCode = TranspileToC(code);
        consoleOutput = $"Transpiled Code:\n{transpiledCode}";
    }

    private string TranspileToC(string cSparkCode)
    {
        return @"
#include <stdio.h>

int main() {
    printf(""Hello, World!\n"");
    return 0;
}";
    }

    private void SendToDebugger()
    {
        string debugData = $"Debugging File: {files[0]}"; // Placeholder
        Navigation.NavigateTo($"/debugger?debugData={Uri.EscapeDataString(debugData)}");
    }
}
